#!/bin/bash
#
#     Copyright (C) 2018 KreAch3R
#
#     Licensed under the Apache License, Version 2.0 (the "License");
#     you may not use this file except in compliance with the License.
#     You may obtain a copy of the License at
#
#          http://www.apache.org/licenses/LICENSE-2.0
#
#     Unless required by applicable law or agreed to in writing, software
#     distributed under the License is distributed on an "AS IS" BASIS,
#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#     See the License for the specific language governing permissions and
#     limitations under the License.

# Version: 1.9

# Variables for color output
green=`tput setaf 2`
cyan=`tput setaf 6`
red=`tput setaf 1`
yellow=`tput setaf 3`
reset=`tput sgr0`

# Variables
# Device path to push to, using adb-$filename-push
adbdestdir=/sdcard
# PC path to save screenshots to, using adb-$filename-screenshot
if grep -q Microsoft /proc/version; then
    screendir=/mnt/d/Pictures/Screenshots/adb
else
    screendir=/media/Data/Pictures/Screenshots/adb
fi

# Check for zero arguments and abort
if [ $# -eq 0 ]; then
    echo "${red}You need to specify at least an adb device id or 'generate' to continue.${reset}"
    exit 1
fi

if [ "$1" ] && [ "$1" != "generate" ]; then
    # Device ID (passed as 1st argument)
    id="$1"
elif [ "$1" == "generate" ]; then
    adb devices | while read line; do
        if [ ! "$line" = "" ] && ([ `echo $line | awk '{print $2}'` = "device" ] || \
                [ `echo $line | awk '{print $2}'` = "recovery" ] || \
                [ `echo $line | awk '{print $2}'` = "sideload" ]); then
            id=$(echo $line | awk '{print $1}')
            # the problem is that adb reads from stdin by default, so you need /dev/null so that it doesn't
            # consume the rest of the loop. Read https://stackoverflow.com/a/13800476/4008886
            devicefull=$(adb -s $id shell getprop ro.product.device </dev/null)

            # Remove any dashes in the name
            device=${devicefull//-}

            # lowercase filename, remove spaces, remove linefeeds/newlines
            # Read https://stackoverflow.com/a/19345966/4008886
            filename=$(echo adb-${device,,} | sed 's/ //g' | tr -d '\r')

            # Multiple device support: count number of already created scripts
            #count=$(find ~/bin -maxdepth 1 -regex ".*$filename[0-9]*" -type f | wc -l)
            #if [ $count != 0 ]; then
            #    append=$(($count + 1))
            #else
            #    unset append
            #fi
            echo "${yellow}Installing $filename$append...${reset}"
            cat <<EOT > ~/bin/$filename$append
# Autogenerated by adb-multi
# It assumes your adb-multi installation resides inside \$PATH
adb-multi "$id" "\$@"
EOT
            echo "${yellow}Installing $filename$append-push...${reset}"
            cat <<EOT > ~/bin/$filename$append-push
# Autogenerated by adb-multi
# It assumes your adb-multi installation resides inside \$PATH
for file in "\$@"; do
    adb-multi "$id" push "\$file" $adbdestdir
done
EOT
            echo "${yellow}Installing $filename$append-screenshot...${reset}"
            cat <<EOT > ~/bin/$filename$append-screenshot
# Autogenerated by adb-multi
# It assumes your adb-multi installation resides inside \$PATH
adb-multi "$id" "file-redirect" "exec-out" "screencap -p" "$screendir/screenshot-\$(date +'%Y%m%d-%H%M%S').png"
EOT
            echo "${yellow}Installing $filename$append-activity...${reset}"
            cat <<EOT > ~/bin/$filename$append-activity
# Autogenerated by adb-multi
# It assumes your adb-multi installation resides inside \$PATH
adb-multi "$id" shell dumpsys activity activities | grep mResumedActivity | cut -d " " -f 8
EOT
            echo "${yellow}Installing $filename$append-install...${reset}"
            cat <<EOT > ~/bin/$filename$append-install
# Autogenerated by adb-multi
# It assumes your adb-multi installation resides inside \$PATH
adb-multi "$id" install -r "${1}"
EOT
            echo "${cyan}Setting scripts as executable...${reset}"
            chmod +x ~/bin/$filename$append
            chmod +x ~/bin/$filename$append-push
            chmod +x ~/bin/$filename$append-screenshot
            chmod +x ~/bin/$filename$append-activity
            chmod +x ~/bin/$filename$append-install
        fi
    done
    echo "${green}Your device adb-multi scripts have been installed in ~/bin. Enjoy!${reset}"
    exit 0
fi

# shift passed arguments one place right
shift 1

# check if device is connected
adb -s $id shell echo "connection test" >/dev/null 2>&1
if [ $? -ne 0 ]; then
    echo  "${red}The selected device is NOT connected!${reset}"
    exit 1
fi

# Grab device info from getprop
model=$(adb -s $id shell getprop ro.product.model | tr -d '\r')
manufacturer=$(adb -s $id shell getprop ro.product.manufacturer | tr -d '\r')
# Strip duplicated manufacturer inside model
shopt -s nocasematch
strippedmodel=$(echo ${model//${manufacturer}/})
shopt -u nocasematch
echo "Connected to ${green}$manufacturer $strippedmodel!${reset}"

if [ "$1" ] && [ "$1" == "file-redirect" ]; then
    # shift passed arguments one MORE place right (to bypass file-redirect)
    shift 1
    # all arguments passed without the last one
    args="${@:1:$(($# - 1))}"
    # where to redirect to (filename passed as last argument)
    redirect="${@:$#}"
    adb -s $id $args > "$redirect"
else
    # Pipe all the commands to adb
    adb -s $id "$@"
fi
