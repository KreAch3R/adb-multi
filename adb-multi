#!/bin/bash
#
#     Copyright (C) 2018 KreAch3R
#
#     Licensed under the Apache License, Version 2.0 (the "License");
#     you may not use this file except in compliance with the License.
#     You may obtain a copy of the License at
#
#          http://www.apache.org/licenses/LICENSE-2.0
#
#     Unless required by applicable law or agreed to in writing, software
#     distributed under the License is distributed on an "AS IS" BASIS,
#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#     See the License for the specific language governing permissions and
#     limitations under the License.

Version=2.55

# Variables DO NOT EDIT

# Variables for color output
green=$(tput setaf 2)
cyan=$(tput setaf 6)
red=$(tput setaf 1)
yellow=$(tput setaf 3)
reset=$(tput sgr0)

# Directory where adb-multi resides
DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )


# Variables FREE TO EDIT

# BEST PRACTICE: Don't change the variables in here, create a config.cfg file
# inside the root directory of the script (you can copy the config.cfg.example file)
# Config.cfg is deliberately placed in .gitignore, so you can track upstream
# while having changed variables.

# Installation path of the generated scripts
SCRIPTS_PATH="${ADB_MULTI_BIN:-$DIR/devices}"

# Device path to push to, using adb-$filename-push
ADBPUSHDIR=/sdcard
# PC path to save screenshots to, using adb-$filename-screenshot
if grep -q Microsoft /proc/version; then
    OS="Microsoft"
    SCREENSHOTDIR=/mnt/d/Pictures/Screenshots/adb
else
    OS="Linux"
    SCREENSHOTDIR=/media/Data/Pictures/Screenshots/adb
fi

# Ask for filenames during script generation, or use default (YES/NO)
USE_DEFAULT_FILENAMES=NO

# Load config.cfg variables
source $SCRIPTDIR/config.cfg


# Start of the main adb-multi script

# Check for zero arguments and abort
if [ $# -eq 0 ]; then
    echo "${red}You need to specify at least an adb device id or 'generate', 'info' to continue.${reset}"
    exit 1
fi

if [ "$1" ] && [ "$1" != "generate" ] && [ "$1" != "info" ]; then
    # Device ID (passed as 1st argument)
    id="$1"
elif [ "$1" == "generate" ]; then
    adb devices | while read -r line; do
        if [ ! "$line" = "" ] && ([ "$(echo "$line" | awk '{print $2}')" = "device" ] || \
                [ "$(echo "$line" | awk '{print $2}')" = "recovery" ] || \
                [ "$(echo "$line" | awk '{print $2}')" = "sideload" ]); then
            id=$(echo "$line" | awk '{print $1}')
            # the problem is that adb reads from stdin by default, so you need /dev/null so that it doesn't
            # consume the rest of the loop. Read https://stackoverflow.com/a/13800476/4008886
            devicefull="$(adb -s "$id" shell getprop ro.product.device </dev/null)"

            # Remove any dashes in the name
            device="${devicefull//-}"

            # lowercase filename, remove spaces, remove linefeeds/newlines
            # Read https://stackoverflow.com/a/19345966/4008886
            filename="$(echo adb-"${device,,}" | sed 's/ //g' | tr -d '\r')"

            # Read https://unix.stackexchange.com/a/445154/90681
            if [ "$USE_DEFAULT_FILENAMES" != "YES" ]; then
	            read -p "Do you want to use "$filename" for $device? (Y/n): " -r < /dev/tty
	            if [[ $REPLY =~ ^[Nn]$ ]]; then
	                echo "${yellow}Please name your "$device"!${reset}"
	                read -p 'New name: ' input < /dev/tty
	                filename=adb-$input
	            fi
	        fi

            # Check and set the custom command argument SCRIPTS_PATH variable
            if [ "$2" ]; then
                SCRIPTS_PATH="$2"
            fi
            # Create install directory if necessary
            mkdir -p $SCRIPTS_PATH

            echo "${yellow}Installing $filename...${reset}"
            cat <<EOT > $SCRIPTS_PATH/"$filename"
# Autogenerated by adb-multi
# It assumes your adb-multi installation resides inside \$PATH
adb-multi "$id" "\$@"
EOT
            echo "${yellow}Installing $filename-push...${reset}"
            cat <<EOT > $SCRIPTS_PATH/"$filename-push"
# Autogenerated by adb-multi
# It assumes your adb-multi installation resides inside \$PATH
for file in "\$@"; do
    adb-multi "$id" push "\$file" "$ADBPUSHDIR"
done
EOT
            echo "${yellow}Installing $filename-screenshot...${reset}"
            cat <<EOT > $SCRIPTS_PATH/"$filename-screenshot"
# Autogenerated by adb-multi
# It assumes your adb-multi installation resides inside \$PATH
adb-multi "$id" "file-redirect" "exec-out" "screencap -p" "$SCREENSHOTDIR/screenshot-\$(date +'%Y%m%d-%H%M%S').png"
EOT
            echo "${yellow}Installing $filename-activity...${reset}"
            cat <<EOT > $SCRIPTS_PATH/"$filename-activity"
# Autogenerated by adb-multi
# It assumes your adb-multi installation resides inside \$PATH
adb-multi "$id" shell dumpsys activity activities | grep mResumedActivity | cut -d " " -f 8
EOT
            echo "${yellow}Installing $filename-install...${reset}"
            cat <<EOT > $SCRIPTS_PATH/"$filename-install"
# Autogenerated by adb-multi
# It assumes your adb-multi installation resides inside \$PATH
for apk in "\$@"; do
    adb-multi "$id" install -r "\$apk"
done
EOT
            echo "${cyan}Setting scripts as executable...${reset}"
            chmod +x $(ls $SCRIPTS_PATH/*$filename*)
            echo ""
        fi
    done
    echo "${green}Your device adb-multi scripts have been installed in "$path". Enjoy!${reset}"
    exit 0
elif [ "$1" == "info" ]; then
    # Show every configuration info
    echo "${green}Version:${reset} $Version"
    echo "${green}OS:${reset} $OS"
    echo "${green}PATH:${reset} $DIR"
    echo "${green}Scripts PATH:${reset} $SCRIPTS_PATH"
    echo "${green}Push PATH:${reset} $ADBPUSHDIR"
    echo "${green}Screenshots PATH:${reset} $SCREENSHOTDIR"
    echo "${green}Default filenames:${reset} $USE_DEFAULT_FILENAMES"
    exit 0
fi

# shift passed arguments one place right
shift 1

# check if device is connected
if [[ "$(adb -s "$id" shell echo "connection test" >/dev/null 2>&1)" -ne 0 ]]; then
    echo  "${red}The selected device is NOT connected!${reset}"
    exit 1
fi

# Grab device info from getprop
model=$(adb -s "$id" shell getprop ro.product.model | tr -d '\r')
manufacturer=$(adb -s "$id" shell getprop ro.product.manufacturer | tr -d '\r')
# Strip duplicated manufacturer inside model
shopt -s nocasematch
strippedmodel="${model//${manufacturer}/}"
shopt -u nocasematch
echo "Connected to ${green}$manufacturer $strippedmodel!${reset}"

if [ "$1" ] && [ "$1" == "file-redirect" ]; then
    # shift passed arguments one MORE place right (to bypass file-redirect)
    shift 1
    # all arguments passed without the last one
    args="${*:1:$(($# - 1))}"
    # where to redirect to (filename passed as last argument)
    redirect="${*:$#}"
    # We WANT $args to be expanded without quotes
    adb -s "$id" $args > "$redirect"
else
    # Pipe all the commands to adb
    adb -s "$id" "$@"
fi
